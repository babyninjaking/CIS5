








1)	Gaddis_9thEd_Chap5_Prob1_Sum
	/* Write a program that asks the user for a positive integer value. The program should
	use a loop to get the sum of all the integers from 1 up to the number entered. For
	example, if the user enters 50, the loop will find the sum of 1, 2, 3, 4, ... 50. */

int inpNum, sum;  	//User input number and total sum.

cin >> inpNum;
sum = inpNum;

while (inpNum > 0)
{
	sum = sum + --inpNum;
}

cout << "Sum = " << sum;



2)	Gaddis_9thEd_Chap5_Prob7_PayInPennies
	/* Write a program that calculates how much a person would earn over a period of time
	if his or her salary is one penny the first day and two pennies the second day, and continues
	to double each day. The program should ask the user for the number of days.
	The output earnings should be displayed in a dollar amount, not the number of pennies.
	Input Validation: Do not accept a number less than 1 for the number of days worked. */

float pay;	//pay
int days;	//# of Days worked

pay = 0.01;

cin >> days;

if (days > 0)	//Input Validation
{
	while (days > 0)	//Sumation loop
	{
		pay *= 2;
		days--;
	}
	pay = pay - 0.01;
	cout.setf(ios::fixed);
	cout.setf(ios::showpoint);
	cout.precision(2);
	cout << "Pay = $" << pay;
}
else
	cout << "Please input a number of days greater than 0.";



3)	Gaddis_9thEd_Chap5_Prob13_MinMax
	/* Write a program with a loop that lets the user enter a series of integers. The user
	should enter -99 to signal the end of the series. After all the numbers have been
	entered, the program should display the largest and smallest numbers entered. */

int inpNum;		//User input number
int bigNum = 0;		//Largest number
int smolNum;		//Smallest number

cin >> inpNum;

while (inpNum != -99)	//compare and evaluate the new number
{
	if (inpNum >= bigNum)
		bigNum = inpNum;
	else if (inpNum <= smolNum)
		smolNum = inpNum;
	cin >> inpNum;
}

cout << "Smallest number in the series is " << smolNum << endl;
cout << "Largest number in the series is " << bigNum;



4)	Gaddis_9thEd_Chap5_Prob22_Rectangle
	/* Write a program that asks the user for a positive integer no greater than 15. The program
	should then display a rectangle on the screen using the character ‘X’. The number
	entered by the user will be the length of each side of the rectangle. */

int varX;	//User input
int row;	//Rows of rectangle
int col;	//Columns of rectangle
char fill;	//Character that fills the rectangle

cin >> varX;
cin >> fill;

if (varX > 0 && varX <= 15)	//Input Validation
{
	for (row = varX - 1 ; row > 0 ; row--)
	{
		for (col = varX ; col > 0 ; col--)
			cout << fill;
		cout << endl;
	}
	for (col = varX ; col > 0 ; col--)
			cout << fill;
}
else
	cout << "Input a number between 1 and 15.";



	
5)	Gaddis_9thEd_Chap5_Prob23_Pattern
	// Write a program to Display the following pattern given an input of 10.
	// Outputs an increase from 1 to 10 the decreases from 10 to 1.

int usrInp;	//User input
int row;	//Row that the program is on
int col;	//Column

cin >> usrInp;

for (row = 1 ; row <= usrInp ; row++)		//First half of the triangle
{
	for (col = 1 ; col <= row ; col++)
		cout << '+';
	cout << "\n\n";
}

for (row = usrInp ; row > 1 ; row--)		//Second half of the triangle
{
	for (col = row ; col > 0; col--)
		cout << '+';
	cout << "\n\n";
}

cout << '+';					//Final +



6)	Sav9EdC4P1
	/* A liter is 0.264179 gallons. Write a program that will read in the number of liters of gasoline consumed by the user’s car 
	and the number of miles traveled by the car and will then output the number of miles per gallon the car delivered. 
	Your program should allow the user to repeat this calculation as often as the user wishes. 
	Define a function to compute the number of miles per gallon. 
	Your program should use a globally defined constant for the number of liters per gallon. */

float LOGC;	//Leiters of Gasoline Consumed
float mTrav;	//Miles traveled
float MPG;	//Miles per gallon
char again;	//Yes or no, if the user wants to go again.

const float GPL = 0.264179;	//Gallons in a liter

cout.setf(ios::fixed);
cout.setf(ios::showpoint);
cout.precision(2);

do
{
	cout << "Enter number of liters of gasoline:\n" << endl;
	cin >> LOGC;
	cout << "Enter number of miles traveled:\n" << endl;
	cin >> mTrav;
	cout << "miles per gallon:" << endl;
	cout << mTrav / (LOGC * GPL) << endl;
	cout << "Again:" << endl;
	cin >> again;
	if(again == 'Y' || again == 'y')
		cout << endl;
} while (again == 'Y' || again == 'y');
	


7)	Sav9EdC4P2
	/* Modify your program from Sav9EdC4P1 so that it will take input data for two cars 
	and output the number of miles per gallon delivered by each car. 
	Your program will also announce which car has the best fuel efficiency (highest number of miles per gallon). */

float LOGC1;	//Leiters of Gasoline Consumed
float mTrav1;	//Miles traveled
float MPG1;	//Miles per gallon
float LOGC2;	//Leiters of Gasoline Consumed
float mTrav2;	//Miles traveled
float MPG2;	//Miles per gallon
char again;	//Yes or no, if the user wants to go again.

const float GPL = 0.264179;	//Gallons in a liter

cout.setf(ios::fixed);
cout.setf(ios::showpoint);
cout.precision(2);

do
{
	cout << "Car 1" << endl;					//Car 1
	cout << "Enter number of liters of gasoline:" << endl;
	cin >> LOGC1;
	cout << "Enter number of miles traveled:" << endl;
	cin >> mTrav1;
	cout << "miles per gallon: ";
	MPG1 = mTrav1 / (LOGC1 * GPL);
	cout << MPG1 << endl;
	cout << endl;

	cout << "Car 2" << endl;					//Car2
	cout << "Enter number of liters of gasoline:" << endl;
	cin >> LOGC2;
	cout << "Enter number of miles traveled:" << endl;
	cin >> mTrav2;
	cout << "miles per gallon: ";
	MPG2 = mTrav2 / (LOGC2 * GPL);
	cout << MPG2 << endl;
	cout << endl;

	if (MPG1 > MPG2)
		cout << "Car 1 is more fuel efficient\n" << endl;
	else
		cout << "Car 2 is more fuel efficient\n" << endl;
	
	cout << "Again:" << endl;
	cin >> again;
	if(again == 'Y' || again == 'y')
		cout << endl;
} while (again == 'Y' || again == 'y');



8/9)	Sav9EdC4P4/Sav9EdC4P5
	/* Write a program to gauge the rate of inflation for the past year. 
	The program asks for the price of an item (such as a hot dog or a 1-carat diamond) both one year ago and today. 
	It estimates the inflation rate as the difference in price divided by the year-ago price. 
	Your program should allow the user to repeat this calculation as often as the user wishes. Define a function to compute the rate of inflation. 
	The inflation rate should be a value of type float giving the rate as a percent, for example 5.3 for 5.3 percent. */

	/* Enhance your program from Sav9EdC4P4 by having it also print out the estimated price of the item in one and in two years from the time of the calculation. 
	The increase in cost over one year is estimated as the inflation rate times the price at the start of the year. 
	Define a second function to determine the estimated cost of an item in one year,given the current price of the item and the inflation rate as arguments. */

float priceC;	//Current price	
float priceP;	//Past Price
float infl;	//Inflation
char again;	//Yes or no, if the user wants to go again.

cout.setf(ios::fixed);
cout.setf(ios::showpoint);
cout.precision(2);

do
{
	cout << "Enter current price:" << endl;				//Inflation
	cin >> priceC;
	cout << "Enter year-ago price:" << endl;
	cin >> priceP;
	infl = (priceC - priceP) / priceP;
	cout << "Inflation rate: " << infl * 100 << "%" << endl;
	cout << endl;
	
	cout << "Price in one year: $" << priceC * (1+infl) << endl;	//Future Prices
	cout << "Price in two year: $" << priceC * (1+infl) * (1+infl) << endl;
	cout << endl;
	
	cout << "Again:" << endl;
	cin >> again;
	if(again == 'Y' || again == 'y')
		cout << endl;
} while (again == 'Y' || again == 'y');



10)	Sav9EdC4P9
	/* Find the max of either two or three parameters of type float and returns the largest of them. 
	Display answer to one decimal place. For function with two parameter, use first two inputs. */

float num1, num2, num3;

float big(float n1, float n2);
// Returns the larger number of two numbers

float big(float n1, float n2, float n3);
// Returns the larger number of three numbers

cout << "Enter first number:" << endl;
cin >> num1;
cout << endl;

cout << "Enter Second number:" << endl;
cin >> num2;
cout << endl;

cout << "Enter third number:" << endl;
cin >> num3;
cout << endl;

cout << "Largest number from two parameter function:" << endl;
cout << big(num1, num2) << endl;
cout << endl;

cout << "Largest number from three parameter function:" << endl;
cout << big(num1, num2, num3) << endl;

float big(float n1, float n2)
{
	if (n1 > n2)
		return n1;
	else
		return n2; 
}

float big(float n1, float n2, float n3)
{
	if (n1 > n2 && n1 > n3)
		return n1;
	else if (n2 > n1 && n2 > n3)
		return n2;
	else
		return n3;
}






















